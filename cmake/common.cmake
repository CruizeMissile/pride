
macro(sf_set_cxxstd taget x)
  message(STATUS "Setting ${target} to require c++: ${x}")
  set_property(TARGET ${target} PROPERTY CXX_STANDARD ${x})
  set_property(TARGET ${target} PROPERTY CXX_STANDARD_REQUIRED ON)
endmacro(sf_set_cxxstd)

function(set_compile_flags target)
  # general flags
  if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_options(${target} INTERFACE "-O0")
    target_compile_options(${target} INTERFACE "-g3")
  elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_options(${target} INTERFACE "-DNDEBUG")
  elseif(CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
    target_compile_options(${target} INTERFACE "-DNDEBUG")
  endif()

  # some gcc/clang flags
  if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
    target_compile_options(${target} INTERFACE "-std=c++1z")
    target_compile_options(${target} INTERFACE "-Wall")
    target_compile_options(${target} INTERFACE "-Wextra")
    target_compile_options(${target} INTERFACE "-Wno-unused-function")
    target_compile_options(${target} INTERFACE "-Wno-multichar")
    target_compile_options(${target} INTERFACE "-Wno-unused-parameter")

    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
      target_compile_options(${target} INTERFACE "-Og")
      target_compile_options(${target} INTERFACE "-fno-inline")
    elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
      target_compile_options(${target} INTERFACE "-O3")
      target_compile_options(${target} INTERFACE "-finline-limit=100")
    elseif(CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
      target_compile_options(${target} INTERFACE "-Os")
    endif()

  elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    target_compile_options(${target} INTERFACE "-std=c++1z")
    target_compile_options(${target} INTERFACE "-Wall")
    target_compile_options(${target} INTERFACE "-Wextra")
    target_compile_options(${target} INTERFACE "-Wno-unused-function")
    target_compile_options(${target} INTERFACE "-Wno-multichar")
    target_compile_options(${target} INTERFACE "-Wno-unused-parameter")

    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
      target_compile_options(${target} INTERFACE "-O3")
    elseif(CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
      target_compile_options(${target} INTERFACE "-Oz")
    endif()

  elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
    target_compile_options(${target} INTERFACE "/std:c++latest")
  endif()
endfunction()

macro(add_filter_group source_list root_dir)
  foreach(source ${source_list})
    get_filename_component(parent_dir ${source} DIRECTORY)
    file(RELATIVE_PATH group "${root_dir}" "${parent_dir}")
    string(REPLACE "/" "\\" group "${group}")
    source_group("${group}" FILES "${source}")
  endforeach()
endmacro()

function(handle_build_problems)

  if (${CMAKE_CURRENT_BINARY_DIR} STREQUAL ${PROJECT_SOURCE_DIR})
    message("----------------------------------------------------------")
    message("In source build are not supported. It is recommended that you")
    message("use a build/ subdirectory:")
    message("   $ cmake . <OPTIONS> -Bbuild")
    message("")
    message("Make sure that you clean up the smake artifacts with:")
    message("   $ rm -rf CMakeFiles CMakeCache.txt")
    message("----------------------------------------------------------")
    message("")
    message(FATAL_ERROR "Stopping build.")
  endif()

  if (CMAKE_BUILD_TYPE STREQUAL "")
    message("There is no BUILD_TYPE selected. Please choose a build type.")
    message("Defaulting to Release.")
    set(CMAKE_BUILD_TYPE "Release")
  endif()

endfunction()
